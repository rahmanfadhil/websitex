---
- hosts: web
  become: yes
  vars:
    - repo_url: https://github.com/rahmanfadhil/websitex.git
    - app_dir: /home/ubuntu/app
    - docker_stack_name: app
  tasks:
    - name: Update apt cache
      apt: update_cache=yes cache_valid_time=3600

    - name: Upgrade all apt packages
      apt: upgrade=dist

    - name: Remove older versions
      apt:
        name:
          - docker
          - docker-engine
          - containerd
          - runc
        state: absent

    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3-pip
        state: present

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        group: docker

    - name: Start docker service
      service:
        name: docker
        state: started

    - name: Install docker python sdk
      pip:
        name:
          - docker
          - jsondiff # idk why, maybe docker_swarm ansible module requires this...

    - name: Init a new swarm with default parameters
      community.docker.docker_swarm:
        state: present

    - name: Clone or pull project repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ app_dir }}"

    - name: Deploy stack from a compose file
      community.docker.docker_stack:
        state: present
        name: "{{ docker_stack_name }}"
        compose:
          - "{{ app_dir }}/docker-compose.prod.yml"
          - version: "3.9"
            services:
              web:
                environment:
                  DATABASE_URL: "{{ database_url }}"
                  AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
                  AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
                  AWS_STORAGE_BUCKET_NAME: "{{ aws_storage_bucket_name }}"
                  SENDGRID_API_KEY: "blah"
                  ALLOWED_HOSTS: "54.169.53.137"
              celery:
                environment:
                  DATABASE_URL: "{{ database_url }}"
                  AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
                  AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
                  AWS_STORAGE_BUCKET_NAME: "{{ aws_storage_bucket_name }}"
                  SENDGRID_API_KEY: "blah"
                  ALLOWED_HOSTS: "54.169.53.137"

    # TODO: run migrations after deploy
